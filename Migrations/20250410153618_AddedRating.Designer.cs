// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicalCollection.Data;

#nullable disable

namespace MusicalCollection.Migrations
{
    [DbContext(typeof(MusicalCollectionDbContext))]
    [Migration("20250410153618_AddedRating")]
    partial class AddedRating
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MusicalCollection.Entities.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlbumId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("Format")
                        .HasColumnType("int");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTracks")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            AlbumId = 1,
                            ArtistId = 1,
                            Format = 1,
                            Genres = "Rock,Pop",
                            Label = "Apple Records",
                            NumberOfTracks = 17,
                            ReleaseDate = new DateOnly(1969, 9, 26),
                            Title = "Abbey Road"
                        },
                        new
                        {
                            AlbumId = 2,
                            ArtistId = 2,
                            Format = 0,
                            Genres = "Rock,Glam",
                            Label = "Republick Records",
                            NumberOfTracks = 13,
                            ReleaseDate = new DateOnly(1982, 9, 26),
                            Title = "Thundertruck"
                        });
                });

            modelBuilder.Entity("MusicalCollection.Entities.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtistId"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DisbandDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FormationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            ArtistId = 1,
                            Biography = "The Beatles were an English rock band formed in Liverpool in 1960.",
                            Country = "United Kingdom",
                            DisbandDate = new DateTime(1970, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormationDate = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genres = "Rock, Pop",
                            Name = "The Beatles"
                        },
                        new
                        {
                            ArtistId = 2,
                            Biography = "AC/DC is a cool rocking band",
                            Country = "Australia",
                            DisbandDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FormationDate = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genres = "Rock, Rock'n'Roll",
                            Name = "AC/DC"
                        });
                });

            modelBuilder.Entity("MusicalCollection.Entities.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlaylistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");

                    b.HasData(
                        new
                        {
                            PlaylistId = 1,
                            CreationDate = new DateTime(2025, 4, 10, 15, 36, 18, 121, DateTimeKind.Utc).AddTicks(8943),
                            PlaylistName = "Favorites",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MusicalCollection.Entities.PlaylistTrack", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.HasKey("PlaylistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("PlaylistTracks");

                    b.HasData(
                        new
                        {
                            PlaylistId = 1,
                            TrackId = 1,
                            Position = 1
                        },
                        new
                        {
                            PlaylistId = 1,
                            TrackId = 2,
                            Position = 2
                        });
                });

            modelBuilder.Entity("MusicalCollection.Entities.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            AlbumId = 1,
                            Comment = "One of the best albums ever!",
                            Rating = 5,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MusicalCollection.Entities.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackId"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Length")
                        .HasColumnType("time");

                    b.Property<int>("PositionInAlbum")
                        .HasColumnType("int");

                    b.Property<string>("Songwriters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrackId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            TrackId = 1,
                            AlbumId = 1,
                            Length = new TimeSpan(0, 0, 4, 19, 0),
                            PositionInAlbum = 1,
                            Songwriters = "John Lennon, Paul McCartney",
                            Title = "Come Together"
                        },
                        new
                        {
                            TrackId = 2,
                            AlbumId = 1,
                            Length = new TimeSpan(0, 0, 3, 2, 0),
                            PositionInAlbum = 2,
                            Songwriters = "George Harrison",
                            Title = "Something"
                        },
                        new
                        {
                            TrackId = 3,
                            AlbumId = 2,
                            Length = new TimeSpan(0, 0, 2, 5, 0),
                            PositionInAlbum = 5,
                            Songwriters = "George Harrison",
                            Title = "Thundertruck"
                        },
                        new
                        {
                            TrackId = 4,
                            AlbumId = 2,
                            Length = new TimeSpan(0, 0, 3, 5, 0),
                            PositionInAlbum = 6,
                            Songwriters = "George Harrison",
                            Title = "Hells Bells"
                        });
                });

            modelBuilder.Entity("MusicalCollection.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreationDate = new DateTime(2025, 4, 10, 15, 36, 18, 121, DateTimeKind.Utc).AddTicks(8898),
                            FirstName = "John",
                            LastName = "Doe"
                        });
                });

            modelBuilder.Entity("MusicalCollection.Entities.UserCollection", b =>
                {
                    b.Property<int>("UserCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCollectionId"));

                    b.Property<DateTime>("AdditionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCollectionId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCollections");

                    b.HasData(
                        new
                        {
                            UserCollectionId = 1,
                            AdditionDate = new DateTime(2025, 4, 10, 15, 36, 18, 121, DateTimeKind.Utc).AddTicks(8915),
                            AlbumId = 1,
                            Status = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("MusicalCollection.Entities.Album", b =>
                {
                    b.HasOne("MusicalCollection.Entities.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicalCollection.Entities.Playlist", b =>
                {
                    b.HasOne("MusicalCollection.Entities.User", "Creator")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("MusicalCollection.Entities.PlaylistTrack", b =>
                {
                    b.HasOne("MusicalCollection.Entities.Playlist", "Playlist")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicalCollection.Entities.Track", "Track")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("MusicalCollection.Entities.Review", b =>
                {
                    b.HasOne("MusicalCollection.Entities.Album", "Album")
                        .WithMany("Reviews")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicalCollection.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicalCollection.Entities.Track", b =>
                {
                    b.HasOne("MusicalCollection.Entities.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("MusicalCollection.Entities.UserCollection", b =>
                {
                    b.HasOne("MusicalCollection.Entities.Album", "Album")
                        .WithMany("UserCollections")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicalCollection.Entities.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicalCollection.Entities.Album", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Tracks");

                    b.Navigation("UserCollections");
                });

            modelBuilder.Entity("MusicalCollection.Entities.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("MusicalCollection.Entities.Playlist", b =>
                {
                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("MusicalCollection.Entities.Track", b =>
                {
                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("MusicalCollection.Entities.User", b =>
                {
                    b.Navigation("Collections");

                    b.Navigation("Playlists");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
